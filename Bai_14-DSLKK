// Ho ten:
// Msv:
// Lop:
/*
Bài 14(thctdlgtbai14.cpp): Cài đặt danh sách liên kết kép có phần tử dữ liệu là số nguyên, với các
phép toán sau:
    1) Bổ sung phần tử dữ liệu x vào sau nút M
    2) Bổ sung phần tử dữ liệu x vào trước nút M
    3) Xóa nút M
    4) Duyệt danh sách để đưa các phần tử dữ liệu ra màn hình từ trái sang phải
	và từ phải sang trái.
    5) Tìm một nút có phần tử dữ liệu bằng x, nếu có trả về địa chỉ nút, nếu không có trả về rỗng.
Sử dụng danh sách liên kết kép để lưu trữ dãy số nguyên theo thứ tự đọc vào từ tệp văn bản 'daysonguyen.txt',
trên tệp không có thông tin về số phần tử của dãy số.
-Đưa dãy số nguyên trong DSLKK ra màn hình theo thứ tự từ trái sang phải và từ phải sang trái.
-Xóa tất cả các nút mà có phần tử dữ liệu bằng x nhập vào từ bàn phím.
*/

#include <iostream>
#include <stdio.h>
#include <fstream>
#include <string.h>
using namespace std;
// Tạo cấu trúc DSLKK
struct Node
{
    int infor;
    Node *left;
    Node *right;
};
// Khai báo hàm 
Node* DLPreInsert(Node *&L,Node *&R,Node *M,int x); // Bổ sung x trước nút M
Node* DLPostInsert(Node *&L,Node *&R,Node *M,int x); // Bổ sung x sau nút M
Node* DLDelete(Node *&L,Node *&R,Node *M);
void DLPreDisplay(Node *L); // Duyệt  từ trái sang phải
void DLPosDisplay(Node *R); // Duyệt từ phải sang trái 
Node* DLSearch(Node *L,Node *R,int x);  

// ----Main-----
int main()
{
    Node *L = NULL,*R = NULL;
    ifstream fin("daysonguyen.txt");
    int n,size = 0;

    // Đọc từ file và ghi vào DSLKK
    while (fin >> n)
    {
        size++;
        L = DLPreInsert(L,R,L,n); // Thêm vào đầu danh sách 
        // R = DLPostInsert(L,R,R,n);
    }
    // Đóng file
    fin.close();

    // In ra màn hình 
    cout<<"Day so nguyen sau khi doc tu file phai sang trai:\n";
    DLPreDisplay(L);
    cout<<"\nDay so nguyen sau khi doc tu file trai sang phai:\n";
    DLPosDisplay(R);

    
    // Khai báo biến
    int x;
    cout<<"\nNhap vao so xoa: ";
    cin>>x;

    // Tìm x
    Node *M = DLSearch(L,R,x);
    for (int i = 0; i < size; i++)
    {
        // Kiểm tra dk
        if (M)
        {
            DLDelete(L,R,M);
            cout<<"DSLKK sau khi xoa "<<x<<" la:\n";
            DLPosDisplay(R);
        }else
        {
            cout<<"Khong tim thay: "<<x;
            break;
        }
        
    }
    
    cout<<endl;
    return 0;
}
//------- Định nghĩa hàm----

// Bổ sung x trước nút M
Node* DLPreInsert(Node *&L,Node *&R,Node *M,int x) 
{
    //1. Tạo nút mới 
    Node *N = new Node;
    N->infor = x;
    N->left = NULL;
    N->right = NULL;

    //2. Trường hợp danh sách rỗng
    if (L == NULL && R == NULL)
    {
        L = R = N;
        return L;
    }

    //3. M trỏ tới tới nút cực trái
    if (M == L) //trường hợp có một nút
    {
        N->right = M;
        M->left = N;
        L = N;
    }else
    {
        M->left->right = N;
        N->left = M->left;
        N->right = M;
        M->left = N;
    }
    return L;
}

// Bổ sung x sau nút M
Node* DLPostInsert(Node *&L,Node *&R,Node *M,int x) 
{
     //1. Tạo nút mới 
    Node *N = new Node;
    N->infor = x;
    N->left = NULL;
    N->right = NULL;

    //2. Trường hợp danh sách rỗng
    if (L == NULL && R == NULL)
    {
        L = R = N;
        return L;
    }

    //3. M trỏ tới nút cực phải
    if (M == R)
    {
        N->left = M;
        M->right = N;
        R = N;
    }
    else
    {   
        M->right->left = N;
        N->right = M->right;
        N->left = M;
        M->right = N;
    }
    return L;
}

// Xoá phần tử đầu tiên
Node* DLDelete(Node *&L,Node *&R,Node *M)
{
    // 1. Trường hợp danh sách rỗng
    if(L ==NULL && R == NULL) 
    {
        cout<<"Danh sach rong!"<<endl;
        return NULL;
    }

    // 2. Ngắt kết nối với nút M 
    if(M == L && M == R) // Danh sách chỉ còn một nút
    {
        delete M;
        L = R = NULL;
    }else if(M == L ) // Cực trái bị loại 
    {
        L = L->right;
        L->left = NULL;
        delete M;
    }else if (M == R)  // Cực phải bị loại 
    {
        R = R->left;
        R->right = NULL;
        delete M;
    }else // Trường hợp còn lại 
    {
        M->left->right = M -> right;
        M->right->left = M -> left;
        delete M;
    }
    return L; // Trả về danh sách sau khi xoá nút
}
// Duyệt từ trái sang phải 
void DLPreDisplay(Node *L) 
{
    
    Node *P = L;
    while (P != NULL)
    {
        cout<< P->infor <<" ";
        P = P -> right;
    }

}
// Duyệt từ phải sang trái 
void DLPosDisplay(Node *R) 
{
    Node *P = R;
    while (P != NULL)
    {
        cout<<P->infor<<" ";
        P = P -> left;
    }

}
// Tìm kiếm 
Node* DLSearch(Node *L,Node *R,int x)
{
    Node *P = L;// Bắt đầu từ nút cực trái (L)
    while (P != NULL)
    {
        // Tìm thấy giá trị x 
        if (P->infor == x)   return P;
        P = P->right;
    }
    // Không tìm thấy giá trị 
    return NULL;
}

